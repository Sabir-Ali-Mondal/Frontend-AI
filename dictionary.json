{
  "qa_pairs": [
    {
      "question": "What mathematics can you do?",
      "answer": "I can perform a complete range of mathematical and scientific calculations including:\n\n- **Basic Arithmetic**: Addition, subtraction, multiplication, division, powers, roots.\n- **Advanced Math**: Trigonometry, logarithms, statistics, and calculus.\n- **Geometry**: Areas, volumes, and perimeters of all shapes.\n- **Physics Calculations**: Mechanics, thermodynamics, electricity, optics, quantum physics.\n- **Chemistry Calculations**: Gas laws, thermochemistry, kinetics, equilibrium.\n- **Conversions**: Units of temperature, length, weight, volume, time, and digital storage.\n- **Finance Math**: Interest, loans, investments, taxes.\n- **Health Metrics**: BMI, calorie needs, heart rate calculations.\n- **Everyday Math**: Tips, discounts, percentages, ratios.\n- **Specialized Scientific Calculations**: Molecular geometry, crystal field theory, statistical mechanics, transport phenomena.\n\nFrom simple questions like \"double of 5\" to complex scientific equations like the Clausius-Clapeyron equation, I'm equipped to assist students, professionals, and anyone needing fast, reliable, and versatile mathematical help."
    }
  ],
  "calculation_patterns": [
    {
      "pattern": "double of",
      "action": "calculate_double",
      "formula": "result = 2 * number",
      "code_snippet": "function double(number) { return 2 * number; }"
    },
    {
      "pattern": "square of",
      "action": "calculate_square",
      "formula": "result = number * number",
      "code_snippet": "function square(number) { return number * number; }"
    },
    {
      "pattern": "percent of",
      "action": "calculate_percentage",
      "formula": "result = (percentage / 100) * total",
      "code_snippet": "function percentage(percentage, total) { return (percentage / 100) * total; }"
    },
    {
      "pattern": "triple of",
      "action": "calculate_triple",
      "formula": "result = 3 * number",
      "code_snippet": "function triple(number) { return 3 * number; }"
    },
    {
      "pattern": "cube of",
      "action": "calculate_cube",
      "formula": "result = number * number * number",
      "code_snippet": "function cube(number) { return number * number * number; }"
    },
    {
      "pattern": "half of",
      "action": "calculate_half",
      "formula": "result = number / 2",
      "code_snippet": "function half(number) { return number / 2; }"
    },
    {
      "pattern": "quarter of",
      "action": "calculate_quarter",
      "formula": "result = number / 4",
      "code_snippet": "function quarter(number) { return number / 4; }"
    },
    {
      "pattern": "add",
      "action": "calculate_addition",
      "formula": "result = a + b",
      "code_snippet": "function add(a, b) { return a + b; }"
    },
    {
      "pattern": "subtract",
      "action": "calculate_subtraction",
      "formula": "result = a - b",
      "code_snippet": "function subtract(a, b) { return a - b; }"
    },
    {
      "pattern": "multiply",
      "action": "calculate_multiplication",
      "formula": "result = a * b",
      "code_snippet": "function multiply(a, b) { return a * b; }"
    },
    {
      "pattern": "divide",
      "action": "calculate_division",
      "formula": "result = a / b",
      "code_snippet": "function divide(a, b) { return b !== 0 ? a / b : 'Cannot divide by zero'; }"
    },
    {
      "pattern": "power of",
      "action": "calculate_power",
      "formula": "result = base ^ exponent",
      "code_snippet": "function power(base, exponent) { return Math.pow(base, exponent); }"
    },
    {
      "pattern": "square root of",
      "action": "calculate_square_root",
      "formula": "result = √number",
      "code_snippet": "function squareRoot(number) { return Math.sqrt(number); }"
    },
    {
      "pattern": "cube root of",
      "action": "calculate_cube_root",
      "formula": "result = ∛number",
      "code_snippet": "function cubeRoot(number) { return Math.cbrt(number); }"
    },
    {
      "pattern": "factorial of",
      "action": "calculate_factorial",
      "formula": "result = n!",
      "code_snippet": "function factorial(n) { if (n <= 1) return 1; return n * factorial(n - 1); }"
    },
    {
      "pattern": "absolute value of",
      "action": "calculate_absolute",
      "formula": "result = |number|",
      "code_snippet": "function absolute(number) { return Math.abs(number); }"
    },
    {
      "pattern": "round",
      "action": "calculate_round",
      "formula": "result = round(number)",
      "code_snippet": "function round(number) { return Math.round(number); }"
    },
    {
      "pattern": "ceiling of",
      "action": "calculate_ceiling",
      "formula": "result = ceil(number)",
      "code_snippet": "function ceiling(number) { return Math.ceil(number); }"
    },
    {
      "pattern": "floor of",
      "action": "calculate_floor",
      "formula": "result = floor(number)",
      "code_snippet": "function floor(number) { return Math.floor(number); }"
    },
    {
      "pattern": "sine of",
      "action": "calculate_sine",
      "formula": "result = sin(angle)",
      "code_snippet": "function sine(angle) { return Math.sin(angle); }"
    },
    {
      "pattern": "cosine of",
      "action": "calculate_cosine",
      "formula": "result = cos(angle)",
      "code_snippet": "function cosine(angle) { return Math.cos(angle); }"
    },
    {
      "pattern": "tangent of",
      "action": "calculate_tangent",
      "formula": "result = tan(angle)",
      "code_snippet": "function tangent(angle) { return Math.tan(angle); }"
    },
    {
      "pattern": "natural log of",
      "action": "calculate_natural_log",
      "formula": "result = ln(number)",
      "code_snippet": "function naturalLog(number) { return Math.log(number); }"
    },
    {
      "pattern": "log base 10 of",
      "action": "calculate_log10",
      "formula": "result = log₁₀(number)",
      "code_snippet": "function log10(number) { return Math.log10(number); }"
    },
    {
      "pattern": "exponential of",
      "action": "calculate_exponential",
      "formula": "result = e^number",
      "code_snippet": "function exponential(number) { return Math.exp(number); }"
    },
    {
      "pattern": "average of",
      "action": "calculate_average",
      "formula": "result = sum / count",
      "code_snippet": "function average(...numbers) { return numbers.reduce((a, b) => a + b, 0) / numbers.length; }"
    },
    {
      "pattern": "sum of",
      "action": "calculate_sum",
      "formula": "result = a + b + c + ...",
      "code_snippet": "function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }"
    },
    {
      "pattern": "product of",
      "action": "calculate_product",
      "formula": "result = a * b * c * ...",
      "code_snippet": "function product(...numbers) { return numbers.reduce((a, b) => a * b, 1); }"
    },
    {
      "pattern": "maximum of",
      "action": "calculate_maximum",
      "formula": "result = max(a, b, c, ...)",
      "code_snippet": "function maximum(...numbers) { return Math.max(...numbers); }"
    },
    {
      "pattern": "minimum of",
      "action": "calculate_minimum",
      "formula": "result = min(a, b, c, ...)",
      "code_snippet": "function minimum(...numbers) { return Math.min(...numbers); }"
    },
    {
      "pattern": "median of",
      "action": "calculate_median",
      "formula": "result = middle value",
      "code_snippet": "function median(...numbers) { const sorted = numbers.sort((a, b) => a - b); const mid = Math.floor(sorted.length / 2); return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2; }"
    },
    {
      "pattern": "mode of",
      "action": "calculate_mode",
      "formula": "result = most frequent value",
      "code_snippet": "function mode(...numbers) { const freq = {}; numbers.forEach(n => freq[n] = (freq[n] || 0) + 1); return Object.keys(freq).reduce((a, b) => freq[a] > freq[b] ? a : b); }"
    },
    {
      "pattern": "range of",
      "action": "calculate_range",
      "formula": "result = max - min",
      "code_snippet": "function range(...numbers) { return Math.max(...numbers) - Math.min(...numbers); }"
    },
    {
      "pattern": "variance of",
      "action": "calculate_variance",
      "formula": "result = Σ(x - μ)² / n",
      "code_snippet": "function variance(...numbers) { const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length; return numbers.reduce((sum, x) => sum + Math.pow(x - mean, 2), 0) / numbers.length; }"
    },
    {
      "pattern": "standard deviation of",
      "action": "calculate_standard_deviation",
      "formula": "result = √variance",
      "code_snippet": "function standardDeviation(...numbers) { const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length; const variance = numbers.reduce((sum, x) => sum + Math.pow(x - mean, 2), 0) / numbers.length; return Math.sqrt(variance); }"
    },
    {
      "pattern": "fibonacci",
      "action": "calculate_fibonacci",
      "formula": "result = F(n-1) + F(n-2)",
      "code_snippet": "function fibonacci(n) { if (n <= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); }"
    },
    {
      "pattern": "prime check",
      "action": "check_prime",
      "formula": "result = is number prime?",
      "code_snippet": "function isPrime(n) { if (n < 2) return false; for (let i = 2; i <= Math.sqrt(n); i++) { if (n % i === 0) return false; } return true; }"
    },
    {
      "pattern": "gcd of",
      "action": "calculate_gcd",
      "formula": "result = greatest common divisor",
      "code_snippet": "function gcd(a, b) { return b === 0 ? a : gcd(b, a % b); }"
    },
    {
      "pattern": "lcm of",
      "action": "calculate_lcm",
      "formula": "result = least common multiple",
      "code_snippet": "function lcm(a, b) { return Math.abs(a * b) / gcd(a, b); }"
    },
    {
      "pattern": "area of circle",
      "action": "calculate_circle_area",
      "formula": "result = π * r²",
      "code_snippet": "function circleArea(radius) { return Math.PI * radius * radius; }"
    },
    {
      "pattern": "circumference of circle",
      "action": "calculate_circle_circumference",
      "formula": "result = 2 * π * r",
      "code_snippet": "function circleCircumference(radius) { return 2 * Math.PI * radius; }"
    },
    {
      "pattern": "area of rectangle",
      "action": "calculate_rectangle_area",
      "formula": "result = length * width",
      "code_snippet": "function rectangleArea(length, width) { return length * width; }"
    },
    {
      "pattern": "perimeter of rectangle",
      "action": "calculate_rectangle_perimeter",
      "formula": "result = 2 * (length + width)",
      "code_snippet": "function rectanglePerimeter(length, width) { return 2 * (length + width); }"
    },
    {
      "pattern": "area of triangle",
      "action": "calculate_triangle_area",
      "formula": "result = 0.5 * base * height",
      "code_snippet": "function triangleArea(base, height) { return 0.5 * base * height; }"
    },
    {
      "pattern": "area of square",
      "action": "calculate_square_area",
      "formula": "result = side²",
      "code_snippet": "function squareArea(side) { return side * side; }"
    },
    {
      "pattern": "perimeter of square",
      "action": "calculate_square_perimeter",
      "formula": "result = 4 * side",
      "code_snippet": "function squarePerimeter(side) { return 4 * side; }"
    },
    {
      "pattern": "volume of cube",
      "action": "calculate_cube_volume",
      "formula": "result = side³",
      "code_snippet": "function cubeVolume(side) { return side * side * side; }"
    },
    {
      "pattern": "volume of sphere",
      "action": "calculate_sphere_volume",
      "formula": "result = (4/3) * π * r³",
      "code_snippet": "function sphereVolume(radius) { return (4/3) * Math.PI * radius * radius * radius; }"
    },
    {
      "pattern": "surface area of sphere",
      "action": "calculate_sphere_surface_area",
      "formula": "result = 4 * π * r²",
      "code_snippet": "function sphereSurfaceArea(radius) { return 4 * Math.PI * radius * radius; }"
    },
    {
      "pattern": "volume of cylinder",
      "action": "calculate_cylinder_volume",
      "formula": "result = π * r² * h",
      "code_snippet": "function cylinderVolume(radius, height) { return Math.PI * radius * radius * height; }"
    },
    {
      "pattern": "surface area of cylinder",
      "action": "calculate_cylinder_surface_area",
      "formula": "result = 2 * π * r * (r + h)",
      "code_snippet": "function cylinderSurfaceArea(radius, height) { return 2 * Math.PI * radius * (radius + height); }"
    },
    {
      "pattern": "volume of cone",
      "action": "calculate_cone_volume",
      "formula": "result = (1/3) * π * r² * h",
      "code_snippet": "function coneVolume(radius, height) { return (1/3) * Math.PI * radius * radius * height; }"
    },
    {
      "pattern": "hypotenuse",
      "action": "calculate_hypotenuse",
      "formula": "result = √(a² + b²)",
      "code_snippet": "function hypotenuse(a, b) { return Math.sqrt(a * a + b * b); }"
    },
    {
      "pattern": "distance between points",
      "action": "calculate_distance",
      "formula": "result = √((x₂-x₁)² + (y₂-y₁)²)",
      "code_snippet": "function distance(x1, y1, x2, y2) { return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)); }"
    },
    {
      "pattern": "slope",
      "action": "calculate_slope",
      "formula": "result = (y₂ - y₁) / (x₂ - x₁)",
      "code_snippet": "function slope(x1, y1, x2, y2) { return (y2 - y1) / (x2 - x1); }"
    },
    {
      "pattern": "midpoint",
      "action": "calculate_midpoint",
      "formula": "result = ((x₁+x₂)/2, (y₁+y₂)/2)",
      "code_snippet": "function midpoint(x1, y1, x2, y2) { return [(x1 + x2) / 2, (y1 + y2) / 2]; }"
    },
    {
      "pattern": "quadratic formula",
      "action": "solve_quadratic",
      "formula": "result = (-b ± √(b² - 4ac)) / 2a",
      "code_snippet": "function quadratic(a, b, c) { const discriminant = b * b - 4 * a * c; if (discriminant < 0) return 'No real solutions'; const sqrt = Math.sqrt(discriminant); return [(-b + sqrt) / (2 * a), (-b - sqrt) / (2 * a)]; }"
    },
    {
      "pattern": "compound interest",
      "action": "calculate_compound_interest",
      "formula": "result = P(1 + r/n)^(nt)",
      "code_snippet": "function compoundInterest(principal, rate, compoundsPerYear, years) { return principal * Math.pow(1 + rate / compoundsPerYear, compoundsPerYear * years); }"
    },
    {
      "pattern": "simple interest",
      "action": "calculate_simple_interest",
      "formula": "result = P * r * t",
      "code_snippet": "function simpleInterest(principal, rate, time) { return principal * rate * time; }"
    },
    {
      "pattern": "loan payment",
      "action": "calculate_loan_payment",
      "formula": "result = P * [r(1+r)^n] / [(1+r)^n - 1]",
      "code_snippet": "function loanPayment(principal, rate, periods) { const r = rate / 100; return principal * (r * Math.pow(1 + r, periods)) / (Math.pow(1 + r, periods) - 1); }"
    },
    {
      "pattern": "present value",
      "action": "calculate_present_value",
      "formula": "result = FV / (1 + r)^n",
      "code_snippet": "function presentValue(futureValue, rate, periods) { return futureValue / Math.pow(1 + rate, periods); }"
    },
    {
      "pattern": "future value",
      "action": "calculate_future_value",
      "formula": "result = PV * (1 + r)^n",
      "code_snippet": "function futureValue(presentValue, rate, periods) { return presentValue * Math.pow(1 + rate, periods); }"
    },
    {
      "pattern": "annuity payment",
      "action": "calculate_annuity_payment",
      "formula": "result = PV * r / [1 - (1 + r)^(-n)]",
      "code_snippet": "function annuityPayment(presentValue, rate, periods) { return presentValue * rate / (1 - Math.pow(1 + rate, -periods)); }"
    },
    {
      "pattern": "celsius to fahrenheit",
      "action": "convert_celsius_fahrenheit",
      "formula": "result = (C * 9/5) + 32",
      "code_snippet": "function celsiusToFahrenheit(celsius) { return (celsius * 9/5) + 32; }"
    },
    {
      "pattern": "fahrenheit to celsius",
      "action": "convert_fahrenheit_celsius",
      "formula": "result = (F - 32) * 5/9",
      "code_snippet": "function fahrenheitToCelsius(fahrenheit) { return (fahrenheit - 32) * 5/9; }"
    },
    {
      "pattern": "kelvin to celsius",
      "action": "convert_kelvin_celsius",
      "formula": "result = K - 273.15",
      "code_snippet": "function kelvinToCelsius(kelvin) { return kelvin - 273.15; }"
    },
    {
      "pattern": "celsius to kelvin",
      "action": "convert_celsius_kelvin",
      "formula": "result = C + 273.15",
      "code_snippet": "function celsiusToKelvin(celsius) { return celsius + 273.15; }"
    },
    {
      "pattern": "meters to feet",
      "action": "convert_meters_feet",
      "formula": "result = meters * 3.28084",
      "code_snippet": "function metersToFeet(meters) { return meters * 3.28084; }"
    },
    {
      "pattern": "feet to meters",
      "action": "convert_feet_meters",
      "formula": "result = feet / 3.28084",
      "code_snippet": "function feetToMeters(feet) { return feet / 3.28084; }"
    },
    {
      "pattern": "kilometers to miles",
      "action": "convert_kilometers_miles",
      "formula": "result = km * 0.621371",
      "code_snippet": "function kilometersToMiles(kilometers) { return kilometers * 0.621371; }"
    },
    {
      "pattern": "miles to kilometers",
      "action": "convert_miles_kilometers",
      "formula": "result = miles / 0.621371",
      "code_snippet": "function milesToKilometers(miles) { return miles / 0.621371; }"
    },
    {
      "pattern": "inches to centimeters",
      "action": "convert_inches_centimeters",
      "formula": "result = inches * 2.54",
      "code_snippet": "function inchesToCentimeters(inches) { return inches * 2.54; }"
    },
    {
      "pattern": "centimeters to inches",
      "action": "convert_centimeters_inches",
      "formula": "result = cm / 2.54",
      "code_snippet": "function centimetersToInches(centimeters) { return centimeters / 2.54; }"
    },
    {
      "pattern": "pounds to kilograms",
      "action": "convert_pounds_kilograms",
      "formula": "result = pounds / 2.20462",
      "code_snippet": "function poundsToKilograms(pounds) { return pounds / 2.20462; }"
    },
    {
      "pattern": "kilograms to pounds",
      "action": "convert_kilograms_pounds",
      "formula": "result = kg * 2.20462",
      "code_snippet": "function kilogramsToPounds(kilograms) { return kilograms * 2.20462; }"
    },
    {
      "pattern": "ounces to grams",
      "action": "convert_ounces_grams",
      "formula": "result = ounces * 28.3495",
      "code_snippet": "function ouncesToGrams(ounces) { return ounces * 28.3495; }"
    },
    {
      "pattern": "grams to ounces",
      "action": "convert_grams_ounces",
      "formula": "result = grams / 28.3495",
      "code_snippet": "function gramsToOunces(grams) { return grams / 28.3495; }"
    },
    {
      "pattern": "gallons to liters",
      "action": "convert_gallons_liters",
      "formula": "result = gallons * 3.78541",
      "code_snippet": "function gallonsToLiters(gallons) { return gallons * 3.78541; }"
    },
    {
      "pattern": "liters to gallons",
      "action": "convert_liters_gallons",
      "formula": "result = liters / 3.78541",
      "code_snippet": "function litersToGallons(liters) { return liters / 3.78541; }"
    },
    {
      "pattern": "cups to milliliters",
      "action": "convert_cups_milliliters",
      "formula": "result = cups * 236.588",
      "code_snippet": "function cupsToMilliliters(cups) { return cups * 236.588; }"
    },
    {
      "pattern": "milliliters to cups",
      "action": "convert_milliliters_cups",
      "formula": "result = ml / 236.588",
      "code_snippet": "function millilitersToCups(milliliters) { return milliliters / 236.588; }"
    },
    {
      "pattern": "square feet to square meters",
      "action": "convert_sqft_sqm",
      "formula": "result = sqft / 10.764",
      "code_snippet": "function squareFeetToSquareMeters(sqft) { return sqft / 10.764; }"
    },
    {
      "pattern": "square meters to square feet",
      "action": "convert_sqm_sqft",
      "formula": "result = sqm * 10.764",
      "code_snippet": "function squareMetersToSquareFeet(sqm) { return sqm * 10.764; }"
    },
    {
      "pattern": "acres to hectares",
      "action": "convert_acres_hectares",
      "formula": "result = acres / 2.471",
      "code_snippet": "function acresToHectares(acres) { return acres / 2.471; }"
    },
    {
      "pattern": "hectares to acres",
      "action": "convert_hectares_acres",
      "formula": "result = hectares * 2.471",
      "code_snippet": "function hectaresToAcres(hectares) { return hectares * 2.471; }"
    },
    {
      "pattern": "mph to kph",
      "action": "convert_mph_kph",
      "formula": "result = mph * 1.60934",
      "code_snippet": "function mphToKph(mph) { return mph * 1.60934; }"
    },
    {
      "pattern": "kph to mph",
      "action": "convert_kph_mph",
      "formula": "result = kph / 1.60934",
      "code_snippet": "function kphToMph(kph) { return kph / 1.60934; }"
    },
    {
      "pattern": "horsepower to watts",
      "action": "convert_hp_watts",
      "formula": "result = hp * 745.7",
      "code_snippet": "function horsepowerToWatts(hp) { return hp * 745.7; }"
    },
    {
      "pattern": "watts to horsepower",
      "action": "convert_watts_hp",
      "formula": "result = watts / 745.7",
      "code_snippet": "function wattsToHorsepower(watts) { return watts / 745.7; }"
    },
    {
      "pattern": "psi to bar",
      "action": "convert_psi_bar",
      "formula": "result = psi / 14.504",
      "code_snippet": "function psiToBar(psi) { return psi / 14.504; }"
    },
    {
      "pattern": "bar to psi",
      "action": "convert_bar_psi",
      "formula": "result = bar * 14.504",
      "code_snippet": "function barToPsi(bar) { return bar * 14.504; }"
    },
    {
      "pattern": "bmi calculation",
      "action": "calculate_bmi",
      "formula": "result = weight / (height²)",
      "code_snippet": "function calculateBMI(weight, height) { return weight / (height * height); }"
    },
    {
      "pattern": "body fat percentage",
      "action": "calculate_body_fat",
      "formula": "result = (1.20 * BMI) + (0.23 * age) - (10.8 * gender) - 5.4",
      "code_snippet": "function bodyFatPercentage(bmi, age, gender) { return (1.20 * bmi) + (0.23 * age) - (10.8 * gender) - 5.4; }"
    },
    {
      "pattern": "calories burned walking",
      "action": "calculate_walking_calories",
      "formula": "result = weight * distance * 0.57",
      "code_snippet": "function walkingCalories(weight, distance) { return weight * distance * 0.57; }"
    },
    {
      "pattern": "calories burned running",
      "action": "calculate_running_calories",
      "formula": "result = weight * distance * 0.75",
      "code_snippet": "function runningCalories(weight, distance) { return weight * distance * 0.75; }"
    },
    {
      "pattern": "heart rate zones",
      "action": "calculate_heart_rate_zones",
      "formula": "result = (220 - age) * intensity",
      "code_snippet": "function heartRateZones(age, intensity) { return (220 - age) * intensity; }"
    },
    {
      "pattern": "water intake",
      "action": "calculate_water_intake",
      "formula": "result = weight * 35 ml",
      "code_snippet": "function waterIntake(weight) { return weight * 35; }"
    },
    {
      "pattern": "protein requirement",
      "action": "calculate_protein_requirement",
      "formula": "result = weight * 0.8g",
      "code_snippet": "function proteinRequirement(weight) { return weight * 0.8; }"
    },
    {
      "pattern": "tip calculation",
      "action": "calculate_tip",
      "formula": "result = bill * (tip_percentage / 100)",
      "code_snippet": "function calculateTip(bill, tipPercentage) { return bill * (tipPercentage / 100); }"
    },
    {
      "pattern": "total with tip",
      "action": "calculate_total_with_tip",
      "formula": "result = bill + (bill * tip_percentage / 100)",
      "code_snippet": "function totalWithTip(bill, tipPercentage) { return bill + (bill * tipPercentage / 100); }"
    },
    {
      "pattern": "split bill",
      "action": "calculate_split_bill",
      "formula": "result = total / number_of_people",
      "code_snippet": "function splitBill(total, numberOfPeople) { return total / numberOfPeople; }"
    },
    {
      "pattern": "discount amount",
      "action": "calculate_discount_amount",
      "formula": "result = price * (discount / 100)",
      "code_snippet": "function discountAmount(price, discount) { return price * (discount / 100); }"
    },
    {
      "pattern": "final price after discount",
      "action": "calculate_final_price",
      "formula": "result = price - (price * discount / 100)",
      "code_snippet": "function finalPrice(price, discount) { return price - (price * discount / 100); }"
    },
    {
      "pattern": "sales tax",
      "action": "calculate_sales_tax",
      "formula": "result = price * (tax_rate / 100)",
      "code_snippet": "function salesTax(price, taxRate) { return price * (taxRate / 100); }"
    },
    {
      "pattern": "total with tax",
      "action": "calculate_total_with_tax",
      "formula": "result = price + (price * tax_rate / 100)",
      "code_snippet": "function totalWithTax(price, taxRate) { return price + (price * taxRate / 100); }"
    },
    {
      "pattern": "markup price",
      "action": "calculate_markup_price",
      "formula": "result = cost + (cost * markup / 100)",
      "code_snippet": "function markupPrice(cost, markup) { return cost + (cost * markup / 100); }"
    },
    {
      "pattern": "profit margin",
      "action": "calculate_profit_margin",
      "formula": "result = (selling_price - cost) / selling_price * 100",
      "code_snippet": "function profitMargin(sellingPrice, cost) { return (sellingPrice - cost) / sellingPrice * 100; }"
    },
    {
      "pattern": "break even point",
      "action": "calculate_break_even",
      "formula": "result = fixed_costs / (price - variable_cost)",
      "code_snippet": "function breakEvenPoint(fixedCosts, price, variableCost) { return fixedCosts / (price - variableCost); }"
    },
    {
      "pattern": "return on investment",
      "action": "calculate_roi",
      "formula": "result = (gain - cost) / cost * 100",
      "code_snippet": "function returnOnInvestment(gain, cost) { return (gain - cost) / cost * 100; }"
    },
    {
      "pattern": "depreciation",
      "action": "calculate_depreciation",
      "formula": "result = (cost - salvage_value) / useful_life",
      "code_snippet": "function depreciation(cost, salvageValue, usefulLife) { return (cost - salvageValue) / usefulLife; }"
    },
    {
      "pattern": "currency conversion",
      "action": "convert_currency",
      "formula": "result = amount * exchange_rate",
      "code_snippet": "function convertCurrency(amount, exchangeRate) { return amount * exchangeRate; }"
    },
    {
      "pattern": "age calculation",
      "action": "calculate_age",
      "formula": "result = current_year - birth_year",
      "code_snippet": "function calculateAge(birthYear) { return new Date().getFullYear() - birthYear; }"
    },
    {
      "pattern": "days between dates",
      "action": "calculate_days_between",
      "formula": "result = (date2 - date1) / (1000 * 60 * 60 * 24)",
      "code_snippet": "function daysBetween(date1, date2) { return Math.abs(date2 - date1) / (1000 * 60 * 60 * 24); }"
    },
    {
      "pattern": "hours to minutes",
      "action": "convert_hours_minutes",
      "formula": "result = hours * 60",
      "code_snippet": "function hoursToMinutes(hours) { return hours * 60; }"
    },
    {
      "pattern": "minutes to hours",
      "action": "convert_minutes_hours",
      "formula": "result = minutes / 60",
      "code_snippet": "function minutesToHours(minutes) { return minutes / 60; }"
    },
    {
      "pattern": "seconds to minutes",
      "action": "convert_seconds_minutes",
      "formula": "result = seconds / 60",
      "code_snippet": "function secondsToMinutes(seconds) { return seconds / 60; }"
    },
    {
      "pattern": "minutes to seconds",
      "action": "convert_minutes_seconds",
      "formula": "result = minutes * 60",
      "code_snippet": "function minutesToSeconds(minutes) { return minutes * 60; }"
    },
    {
      "pattern": "days to hours",
      "action": "convert_days_hours",
      "formula": "result = days * 24",
      "code_snippet": "function daysToHours(days) { return days * 24; }"
    },
    {
      "pattern": "hours to days",
      "action": "convert_hours_days",
      "formula": "result = hours / 24",
      "code_snippet": "function hoursToDays(hours) { return hours / 24; }"
    },
    {
      "pattern": "weeks to days",
      "action": "convert_weeks_days",
      "formula": "result = weeks * 7",
      "code_snippet": "function weeksToDays(weeks) { return weeks * 7; }"
    },
    {
      "pattern": "days to weeks",
      "action": "convert_days_weeks",
      "formula": "result = days / 7",
      "code_snippet": "function daysToWeeks(days) { return days / 7; }"
    },
    {
      "pattern": "months to days",
      "action": "convert_months_days",
      "formula": "result = months * 30.44",
      "code_snippet": "function monthsToDays(months) { return months * 30.44; }"
    },
    {
      "pattern": "days to months",
      "action": "convert_days_months",
      "formula": "result = days / 30.44",
      "code_snippet": "function daysToMonths(days) { return days / 30.44; }"
    },
    {
      "pattern": "years to days",
      "action": "convert_years_days",
      "formula": "result = years * 365.25",
      "code_snippet": "function yearsToDays(years) { return years * 365.25; }"
    },
    {
      "pattern": "days to years",
      "action": "convert_days_years",
      "formula": "result = days / 365.25",
      "code_snippet": "function daysToYears(days) { return days / 365.25; }"
    },
    {
      "pattern": "binary to decimal",
      "action": "convert_binary_decimal",
      "formula": "result = parseInt(binary, 2)",
      "code_snippet": "function binaryToDecimal(binary) { return parseInt(binary, 2); }"
    },
    {
      "pattern": "decimal to binary",
      "action": "convert_decimal_binary",
      "formula": "result = decimal.toString(2)",
      "code_snippet": "function decimalToBinary(decimal) { return decimal.toString(2); }"
    },
    {
      "pattern": "decimal to hexadecimal",
      "action": "convert_decimal_hex",
      "formula": "result = decimal.toString(16)",
      "code_snippet": "function decimalToHex(decimal) { return decimal.toString(16).toUpperCase(); }"
    },
    {
      "pattern": "hexadecimal to decimal",
      "action": "convert_hex_decimal",
      "formula": "result = parseInt(hex, 16)",
      "code_snippet": "function hexToDecimal(hex) { return parseInt(hex, 16); }"
    },
    {
      "pattern": "octal to decimal",
      "action": "convert_octal_decimal",
      "formula": "result = parseInt(octal, 8)",
      "code_snippet": "function octalToDecimal(octal) { return parseInt(octal, 8); }"
    },
    {
      "pattern": "decimal to octal",
      "action": "convert_decimal_octal",
      "formula": "result = decimal.toString(8)",
      "code_snippet": "function decimalToOctal(decimal) { return decimal.toString(8); }"
    },
    {
      "pattern": "ascii to character",
      "action": "convert_ascii_char",
      "formula": "result = String.fromCharCode(ascii)",
      "code_snippet": "function asciiToChar(ascii) { return String.fromCharCode(ascii); }"
    },
    {
      "pattern": "character to ascii",
      "action": "convert_char_ascii",
      "formula": "result = char.charCodeAt(0)",
      "code_snippet": "function charToAscii(char) { return char.charCodeAt(0); }"
    },
    {
      "pattern": "rgb to hex",
      "action": "convert_rgb_hex",
      "formula": "result = #RRGGBB",
      "code_snippet": "function rgbToHex(r, g, b) { return '#' + [r, g, b].map(x => x.toString(16).padStart(2, '0')).join(''); }"
    },
    {
      "pattern": "hex to rgb",
      "action": "convert_hex_rgb",
      "formula": "result = [R, G, B]",
      "code_snippet": "function hexToRgb(hex) { const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex); return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null; }"
    },
    {
      "pattern": "percentage change",
      "action": "calculate_percentage_change",
      "formula": "result = ((new_value - old_value) / old_value) * 100",
      "code_snippet": "function percentageChange(oldValue, newValue) { return ((newValue - oldValue) / oldValue) * 100; }"
    },
    {
      "pattern": "percentage increase",
      "action": "calculate_percentage_increase",
      "formula": "result = ((new_value - old_value) / old_value) * 100",
      "code_snippet": "function percentageIncrease(oldValue, newValue) { return ((newValue - oldValue) / oldValue) * 100; }"
    },
    {
      "pattern": "percentage decrease",
      "action": "calculate_percentage_decrease",
      "formula": "result = ((old_value - new_value) / old_value) * 100",
      "code_snippet": "function percentageDecrease(oldValue, newValue) { return ((oldValue - newValue) / oldValue) * 100; }"
    },
    {
      "pattern": "ratio calculation",
      "action": "calculate_ratio",
      "formula": "result = a : b",
      "code_snippet": "function calculateRatio(a, b) { const gcd = (x, y) => y === 0 ? x : gcd(y, x % y); const divisor = gcd(a, b); return [a / divisor, b / divisor]; }"
    },
    {
      "pattern": "proportion calculation",
      "action": "calculate_proportion",
      "formula": "result = (a / b) = (c / x)",
      "code_snippet": "function calculateProportion(a, b, c) { return (b * c) / a; }"
    },
    {
      "pattern": "scale factor",
      "action": "calculate_scale_factor",
      "formula": "result = new_size / original_size",
      "code_snippet": "function scaleFactor(originalSize, newSize) { return newSize / originalSize; }"
    },
    {
      "pattern": "unit rate",
      "action": "calculate_unit_rate",
      "formula": "result = quantity / units",
      "code_snippet": "function unitRate(quantity, units) { return quantity / units; }"
    },
    {
      "pattern": "density calculation",
      "action": "calculate_density",
      "formula": "result = mass / volume",
      "code_snippet": "function calculateDensity(mass, volume) { return mass / volume; }"
    },
    {
      "pattern": "speed calculation",
      "action": "calculate_speed",
      "formula": "result = distance / time",
      "code_snippet": "function calculateSpeed(distance, time) { return distance / time; }"
    },
    {
      "pattern": "acceleration calculation",
      "action": "calculate_acceleration",
      "formula": "result = (final_velocity - initial_velocity) / time",
      "code_snippet": "function calculateAcceleration(initialVelocity, finalVelocity, time) { return (finalVelocity - initialVelocity) / time; }"
    },
    {
      "pattern": "force calculation",
      "action": "calculate_force",
      "formula": "result = mass * acceleration",
      "code_snippet": "function calculateForce(mass, acceleration) { return mass * acceleration; }"
    },
    {
      "pattern": "work calculation",
      "action": "calculate_work",
      "formula": "result = force * distance",
      "code_snippet": "function calculateWork(force, distance) { return force * distance; }"
    },
    {
      "pattern": "power calculation",
      "action": "calculate_power",
      "formula": "result = work / time",
      "code_snippet": "function calculatePower(work, time) { return work / time; }"
    },
    {
      "pattern": "kinetic energy",
      "action": "calculate_kinetic_energy",
      "formula": "result = 0.5 * mass * velocity²",
      "code_snippet": "function kineticEnergy(mass, velocity) { return 0.5 * mass * velocity * velocity; }"
    },
    {
      "pattern": "potential energy",
      "action": "calculate_potential_energy",
      "formula": "result = mass * gravity * height",
      "code_snippet": "function potentialEnergy(mass, gravity, height) { return mass * gravity * height; }"
    },
    {
      "pattern": "momentum calculation",
      "action": "calculate_momentum",
      "formula": "result = mass * velocity",
      "code_snippet": "function calculateMomentum(mass, velocity) { return mass * velocity; }"
    },
    {
      "pattern": "pressure calculation",
      "action": "calculate_pressure",
      "formula": "result = force / area",
      "code_snippet": "function calculatePressure(force, area) { return force / area; }"
    },
    {
      "pattern": "ohms law voltage",
      "action": "calculate_voltage",
      "formula": "result = current * resistance",
      "code_snippet": "function calculateVoltage(current, resistance) { return current * resistance; }"
    },
    {
      "pattern": "ohms law current",
      "action": "calculate_current",
      "formula": "result = voltage / resistance",
      "code_snippet": "function calculateCurrent(voltage, resistance) { return voltage / resistance; }"
    },
    {
      "pattern": "ohms law resistance",
      "action": "calculate_resistance",
      "formula": "result = voltage / current",
      "code_snippet": "function calculateResistance(voltage, current) { return voltage / current; }"
    },
    {
      "pattern": "electrical power",
      "action": "calculate_electrical_power",
      "formula": "result = voltage * current",
      "code_snippet": "function electricalPower(voltage, current) { return voltage * current; }"
    },
    {
      "pattern": "electrical energy",
      "action": "calculate_electrical_energy",
      "formula": "result = power * time",
      "code_snippet": "function electricalEnergy(power, time) { return power * time; }"
    },
    {
      "pattern": "frequency to wavelength",
      "action": "convert_frequency_wavelength",
      "formula": "result = speed_of_light / frequency",
      "code_snippet": "function frequencyToWavelength(frequency) { return 299792458 / frequency; }"
    },
    {
      "pattern": "wavelength to frequency",
      "action": "convert_wavelength_frequency",
      "formula": "result = speed_of_light / wavelength",
      "code_snippet": "function wavelengthToFrequency(wavelength) { return 299792458 / wavelength; }"
    },
    {
      "pattern": "decibel calculation",
      "action": "calculate_decibels",
      "formula": "result = 10 * log₁₀(power_ratio)",
      "code_snippet": "function calculateDecibels(powerRatio) { return 10 * Math.log10(powerRatio); }"
    },
    {
      "pattern": "ph calculation",
      "action": "calculate_ph",
      "formula": "result = -log₁₀(H⁺ concentration)",
      "code_snippet": "function calculatePH(hydrogenConcentration) { return -Math.log10(hydrogenConcentration); }"
    },
    {
      "pattern": "molarity calculation",
      "action": "calculate_molarity",
      "formula": "result = moles / volume_in_liters",
      "code_snippet": "function calculateMolarity(moles, volumeInLiters) { return moles / volumeInLiters; }"
    },
    {
      "pattern": "molar mass",
      "action": "calculate_molar_mass",
      "formula": "result = mass / moles",
      "code_snippet": "function calculateMolarMass(mass, moles) { return mass / moles; }"
    },
    {
      "pattern": "ideal gas law",
      "action": "calculate_ideal_gas",
      "formula": "result = (pressure * volume) / (moles * gas_constant * temperature)",
      "code_snippet": "function idealGasLaw(pressure, volume, moles, temperature) { const R = 8.314; return (pressure * volume) / (moles * R * temperature); }"
    },
    {
      "pattern": "half life calculation",
      "action": "calculate_half_life",
      "formula": "result = ln(2) / decay_constant",
      "code_snippet": "function halfLife(decayConstant) { return Math.log(2) / decayConstant; }"
    },
    {
      "pattern": "radioactive decay",
      "action": "calculate_radioactive_decay",
      "formula": "result = initial_amount * e^(-decay_constant * time)",
      "code_snippet": "function radioactiveDecay(initialAmount, decayConstant, time) { return initialAmount * Math.exp(-decayConstant * time); }"
    },
    {
      "pattern": "escape velocity",
      "action": "calculate_escape_velocity",
      "formula": "result = √(2 * G * M / r)",
      "code_snippet": "function escapeVelocity(mass, radius) { const G = 6.674e-11; return Math.sqrt(2 * G * mass / radius); }"
    },
    {
      "pattern": "orbital velocity",
      "action": "calculate_orbital_velocity",
      "formula": "result = √(G * M / r)",
      "code_snippet": "function orbitalVelocity(mass, radius) { const G = 6.674e-11; return Math.sqrt(G * mass / radius); }"
    },
    {
      "pattern": "gravitational force",
      "action": "calculate_gravitational_force",
      "formula": "result = G * m₁ * m₂ / r²",
      "code_snippet": "function gravitationalForce(mass1, mass2, distance) { const G = 6.674e-11; return G * mass1 * mass2 / (distance * distance); }"
    },
    {
      "pattern": "centripetal force",
      "action": "calculate_centripetal_force",
      "formula": "result = mass * velocity² / radius",
      "code_snippet": "function centripetalForce(mass, velocity, radius) { return mass * velocity * velocity / radius; }"
    },
    {
      "pattern": "angular velocity",
      "action": "calculate_angular_velocity",
      "formula": "result = 2π / period",
      "code_snippet": "function angularVelocity(period) { return 2 * Math.PI / period; }"
    },
    {
      "pattern": "angular acceleration",
      "action": "calculate_angular_acceleration",
      "formula": "result = (final_angular_velocity - initial_angular_velocity) / time",
      "code_snippet": "function angularAcceleration(initialAngularVelocity, finalAngularVelocity, time) { return (finalAngularVelocity - initialAngularVelocity) / time; }"
    },
    {
      "pattern": "torque calculation",
      "action": "calculate_torque",
      "formula": "result = force * distance * sin(angle)",
      "code_snippet": "function calculateTorque(force, distance, angle) { return force * distance * Math.sin(angle); }"
    },
    {
      "pattern": "moment of inertia",
      "action": "calculate_moment_of_inertia",
      "formula": "result = mass * radius²",
      "code_snippet": "function momentOfInertia(mass, radius) { return mass * radius * radius; }"
    },
    {
      "pattern": "rotational kinetic energy",
      "action": "calculate_rotational_kinetic_energy",
      "formula": "result = 0.5 * moment_of_inertia * angular_velocity²",
      "code_snippet": "function rotationalKineticEnergy(momentOfInertia, angularVelocity) { return 0.5 * momentOfInertia * angularVelocity * angularVelocity; }"
    },
    {
      "pattern": "spring constant",
      "action": "calculate_spring_constant",
      "formula": "result = force / displacement",
      "code_snippet": "function springConstant(force, displacement) { return force / displacement; }"
    },
    {
      "pattern": "elastic potential energy",
      "action": "calculate_elastic_potential_energy",
      "formula": "result = 0.5 * spring_constant * displacement²",
      "code_snippet": "function elasticPotentialEnergy(springConstant, displacement) { return 0.5 * springConstant * displacement * displacement; }"
    },
    {
      "pattern": "simple harmonic motion period",
      "action": "calculate_shm_period",
      "formula": "result = 2π * √(mass / spring_constant)",
      "code_snippet": "function shmPeriod(mass, springConstant) { return 2 * Math.PI * Math.sqrt(mass / springConstant); }"
    },
    {
      "pattern": "pendulum period",
      "action": "calculate_pendulum_period",
      "formula": "result = 2π * √(length / gravity)",
      "code_snippet": "function pendulumPeriod(length, gravity) { return 2 * Math.PI * Math.sqrt(length / gravity); }"
    },
    {
      "pattern": "wave speed",
      "action": "calculate_wave_speed",
      "formula": "result = frequency * wavelength",
      "code_snippet": "function waveSpeed(frequency, wavelength) { return frequency * wavelength; }"
    },
    {
      "pattern": "doppler effect",
      "action": "calculate_doppler_effect",
      "formula": "result = source_frequency * (wave_speed ± observer_speed) / (wave_speed ± source_speed)",
      "code_snippet": "function dopplerEffect(sourceFrequency, waveSpeed, observerSpeed, sourceSpeed) { return sourceFrequency * (waveSpeed + observerSpeed) / (waveSpeed + sourceSpeed); }"
    },
    {
      "pattern": "snells law",
      "action": "calculate_snells_law",
      "formula": "result = n₁ * sin(θ₁) = n₂ * sin(θ₂)",
      "code_snippet": "function snellsLaw(n1, angle1, n2) { return Math.asin(n1 * Math.sin(angle1) / n2); }"
    },
    {
      "pattern": "lens equation",
      "action": "calculate_lens_equation",
      "formula": "result = 1/f = 1/object_distance + 1/image_distance",
      "code_snippet": "function lensEquation(objectDistance, imageDistance) { return 1 / (1/objectDistance + 1/imageDistance); }"
    },
    {
      "pattern": "magnification",
      "action": "calculate_magnification",
      "formula": "result = image_height / object_height",
      "code_snippet": "function magnification(imageHeight, objectHeight) { return imageHeight / objectHeight; }"
    },
    {
      "pattern": "capacitance",
      "action": "calculate_capacitance",
      "formula": "result = charge / voltage",
      "code_snippet": "function capacitance(charge, voltage) { return charge / voltage; }"
    },
    {
      "pattern": "capacitor energy",
      "action": "calculate_capacitor_energy",
      "formula": "result = 0.5 * capacitance * voltage²",
      "code_snippet": "function capacitorEnergy(capacitance, voltage) { return 0.5 * capacitance * voltage * voltage; }"
    },
    {
      "pattern": "inductance",
      "action": "calculate_inductance",
      "formula": "result = magnetic_flux / current",
      "code_snippet": "function inductance(magneticFlux, current) { return magneticFlux / current; }"
    },
    {
      "pattern": "inductor energy",
      "action": "calculate_inductor_energy",
      "formula": "result = 0.5 * inductance * current²",
      "code_snippet": "function inductorEnergy(inductance, current) { return 0.5 * inductance * current * current; }"
    },
    {
      "pattern": "rc time constant",
      "action": "calculate_rc_time_constant",
      "formula": "result = resistance * capacitance",
      "code_snippet": "function rcTimeConstant(resistance, capacitance) { return resistance * capacitance; }"
    },
    {
      "pattern": "rl time constant",
      "action": "calculate_rl_time_constant",
      "formula": "result = inductance / resistance",
      "code_snippet": "function rlTimeConstant(inductance, resistance) { return inductance / resistance; }"
    },
    {
      "pattern": "resonant frequency",
      "action": "calculate_resonant_frequency",
      "formula": "result = 1 / (2π * √(inductance * capacitance))",
      "code_snippet": "function resonantFrequency(inductance, capacitance) { return 1 / (2 * Math.PI * Math.sqrt(inductance * capacitance)); }"
    },
    {
      "pattern": "impedance",
      "action": "calculate_impedance",
      "formula": "result = √(resistance² + reactance²)",
      "code_snippet": "function impedance(resistance, reactance) { return Math.sqrt(resistance * resistance + reactance * reactance); }"
    },
    {
      "pattern": "reactance capacitive",
      "action": "calculate_capacitive_reactance",
      "formula": "result = 1 / (2π * frequency * capacitance)",
      "code_snippet": "function capacitiveReactance(frequency, capacitance) { return 1 / (2 * Math.PI * frequency * capacitance); }"
    },
    {
      "pattern": "reactance inductive",
      "action": "calculate_inductive_reactance",
      "formula": "result = 2π * frequency * inductance",
      "code_snippet": "function inductiveReactance(frequency, inductance) { return 2 * Math.PI * frequency * inductance; }"
    },
    {
      "pattern": "transformer ratio",
      "action": "calculate_transformer_ratio",
      "formula": "result = primary_voltage / secondary_voltage",
      "code_snippet": "function transformerRatio(primaryVoltage, secondaryVoltage) { return primaryVoltage / secondaryVoltage; }"
    },
    {
      "pattern": "efficiency calculation",
      "action": "calculate_efficiency",
      "formula": "result = (output / input) * 100",
      "code_snippet": "function efficiency(output, input) { return (output / input) * 100; }"
    },
    {
      "pattern": "heat capacity",
      "action": "calculate_heat_capacity",
      "formula": "result = heat_energy / temperature_change",
      "code_snippet": "function heatCapacity(heatEnergy, temperatureChange) { return heatEnergy / temperatureChange; }"
    },
    {
      "pattern": "specific heat",
      "action": "calculate_specific_heat",
      "formula": "result = heat_energy / (mass * temperature_change)",
      "code_snippet": "function specificHeat(heatEnergy, mass, temperatureChange) { return heatEnergy / (mass * temperatureChange); }"
    },
    {
      "pattern": "thermal expansion",
      "action": "calculate_thermal_expansion",
      "formula": "result = original_length * expansion_coefficient * temperature_change",
      "code_snippet": "function thermalExpansion(originalLength, expansionCoefficient, temperatureChange) { return originalLength * expansionCoefficient * temporatureChange; }"
    },
    {
      "pattern": "heat transfer rate",
      "action": "calculate_heat_transfer_rate",
      "formula": "result = thermal_conductivity * area * temperature_difference / thickness",
      "code_snippet": "function heatTransferRate(thermalConductivity, area, temperatureDifference, thickness) { return thermalConductivity * area * temperatureDifference / thickness; }"
    },
    {
      "pattern": "stefan boltzmann law",
      "action": "calculate_stefan_boltzmann",
      "formula": "result = σ * area * temperature⁴",
      "code_snippet": "function stefanBoltzmann(area, temperature) { const sigma = 5.67e-8; return sigma * area * Math.pow(temperature, 4); }"
    },
    {
      "pattern": "entropy change",
      "action": "calculate_entropy_change",
      "formula": "result = heat_energy / temperature",
      "code_snippet": "function entropyChange(heatEnergy, temperature) { return heatEnergy / temperature; }"
    },
    {
      "pattern": "carnot efficiency",
      "action": "calculate_carnot_efficiency",
      "formula": "result = 1 - (cold_temperature / hot_temperature)",
      "code_snippet": "function carnotEfficiency(coldTemperature, hotTemperature) { return 1 - (coldTemperature / hotTemperature); }"
    },
    {
      "pattern": "gas pressure",
      "action": "calculate_gas_pressure",
      "formula": "result = force / area",
      "code_snippet": "function gasPressure(force, area) { return force / area; }"
    },
    {
      "pattern": "boyles law",
      "action": "calculate_boyles_law",
      "formula": "result = P₁ * V₁ = P₂ * V₂",
      "code_snippet": "function boylesLaw(pressure1, volume1, pressure2) { return (pressure1 * volume1) / pressure2; }"
    },
    {
      "pattern": "charles law",
      "action": "calculate_charles_law",
      "formula": "result = V₁ / T₁ = V₂ / T₂",
      "code_snippet": "function charlesLaw(volume1, temperature1, temperature2) { return (volume1 * temperature2) / temperature1; }"
    },
    {
      "pattern": "gay lussac law",
      "action": "calculate_gay_lussac_law",
      "formula": "result = P₁ / T₁ = P₂ / T₂",
      "code_snippet": "function gayLussacLaw(pressure1, temperature1, temperature2) { return (pressure1 * temperature2) / temperature1; }"
    },
    {
      "pattern": "avogadro law",
      "action": "calculate_avogadro_law",
      "formula": "result = V₁ / n₁ = V₂ / n₂",
      "code_snippet": "function avogadroLaw(volume1, moles1, moles2) { return (volume1 * moles2) / moles1; }"
    },
    {
      "pattern": "combined gas law",
      "action": "calculate_combined_gas_law",
      "formula": "result = (P₁ * V₁) / T₁ = (P₂ * V₂) / T₂",
      "code_snippet": "function combinedGasLaw(pressure1, volume1, temperature1, pressure2, volume2) { return (pressure1 * volume1 * temperature2) / (temperature1 * pressure2); }"
    },
    {
      "pattern": "daltons law",
      "action": "calculate_daltons_law",
      "formula": "result = P_total = P₁ + P₂ + P₃ + ...",
      "code_snippet": "function daltonsLaw(...partialPressures) { return partialPressures.reduce((total, pressure) => total + pressure, 0); }"
    },
    {
      "pattern": "henrys law",
      "action": "calculate_henrys_law",
      "formula": "result = concentration = henry_constant * pressure",
      "code_snippet": "function henrysLaw(henryConstant, pressure) { return henryConstant * pressure; }"
    },
    {
      "pattern": "raoults law",
      "action": "calculate_raoults_law",
      "formula": "result = P_solution = X_solvent * P_pure",
      "code_snippet": "function raoultsLaw(moleFractionSolvent, purePressure) { return moleFractionSolvent * purePressure; }"
    },
    {
      "pattern": "osmotic pressure",
      "action": "calculate_osmotic_pressure",
      "formula": "result = molarity * gas_constant * temperature",
      "code_snippet": "function osmoticPressure(molarity, temperature) { const R = 0.0821; return molarity * R * temperature; }"
    },
    {
      "pattern": "freezing point depression",
      "action": "calculate_freezing_point_depression",
      "formula": "result = freezing_constant * molality",
      "code_snippet": "function freezingPointDepression(freezingConstant, molality) { return freezingConstant * molality; }"
    },
    {
      "pattern": "boiling point elevation",
      "action": "calculate_boiling_point_elevation",
      "formula": "result = boiling_constant * molality",
      "code_snippet": "function boilingPointElevation(boilingConstant, molality) { return boilingConstant * molality; }"
    },
    {
      "pattern": "arrhenius equation",
      "action": "calculate_arrhenius_equation",
      "formula": "result = A * e^(-Ea / RT)",
      "code_snippet": "function arrheniusEquation(preExponentialFactor, activationEnergy, gasConstant, temperature) { return preExponentialFactor * Math.exp(-activationEnergy / (gasConstant * temperature)); }"
    },
    {
      "pattern": "rate constant",
      "action": "calculate_rate_constant",
      "formula": "result = rate / [concentration]^order",
      "code_snippet": "function rateConstant(rate, concentration, order) { return rate / Math.pow(concentration, order); }"
    },
    {
      "pattern": "half life first order",
      "action": "calculate_first_order_half_life",
      "formula": "result = ln(2) / rate_constant",
      "code_snippet": "function firstOrderHalfLife(rateConstant) { return Math.log(2) / rateConstant; }"
    },
    {
      "pattern": "integrated rate law",
      "action": "calculate_integrated_rate_law",
      "formula": "result = [A] = [A₀] * e^(-kt)",
      "code_snippet": "function integratedRateLaw(initialConcentration, rateConstant, time) { return initialConcentration * Math.exp(-rateConstant * time); }"
    },
    {
      "pattern": "equilibrium constant",
      "action": "calculate_equilibrium_constant",
      "formula": "result = [products] / [reactants]",
      "code_snippet": "function equilibriumConstant(productConcentrations, reactantConcentrations) { return productConcentrations.reduce((a, b) => a * b, 1) / reactantConcentrations.reduce((a, b) => a * b, 1); }"
    },
    {
      "pattern": "gibbs free energy",
      "action": "calculate_gibbs_free_energy",
      "formula": "result = enthalpy - (temperature * entropy)",
      "code_snippet": "function gibbsFreeEnergy(enthalpy, temperature, entropy) { return enthalpy - (temperature * entropy); }"
    },
    {
      "pattern": "nernst equation",
      "action": "calculate_nernst_equation",
      "formula": "result = standard_potential - (RT/nF) * ln(Q)",
      "code_snippet": "function nernstEquation(standardPotential, temperature, electrons, reactionQuotient) { const R = 8.314; const F = 96485; return standardPotential - (R * temperature / (electrons * F)) * Math.log(reactionQuotient); }"
    },
    {
      "pattern": "henderson hasselbalch",
      "action": "calculate_henderson_hasselbalch",
      "formula": "result = pKa + log([A⁻] / [HA])",
      "code_snippet": "function hendersonHasselbalch(pKa, conjugateBase, acid) { return pKa + Math.log10(conjugateBase / acid); }"
    },
    {
      "pattern": "buffer capacity",
      "action": "calculate_buffer_capacity",
      "formula": "result = 2.3 * concentration * Ka * [H⁺] / (Ka + [H⁺])²",
      "code_snippet": "function bufferCapacity(concentration, ka, hydrogenConcentration) { return 2.3 * concentration * ka * hydrogenConcentration / Math.pow(ka + hydrogenConcentration, 2); }"
    },
    {
      "pattern": "ionic strength",
      "action": "calculate_ionic_strength",
      "formula": "result = 0.5 * Σ(concentration * charge²)",
      "code_snippet": "function ionicStrength(concentrations, charges) { return 0.5 * concentrations.reduce((sum, conc, i) => sum + conc * charges[i] * charges[i], 0); }"
    },
    {
      "pattern": "debye huckel",
      "action": "calculate_debye_huckel",
      "formula": "result = -A * charge² * √ionic_strength",
      "code_snippet": "function debyeHuckel(charge, ionicStrength, temperature) { const A = 0.509; return -A * charge * charge * Math.sqrt(ionicStrength); }"
    },
    {
      "pattern": "activity coefficient",
      "action": "calculate_activity_coefficient",
      "formula": "result = e^(-A * charge² * √ionic_strength)",
      "code_snippet": "function activityCoefficient(charge, ionicStrength) { const A = 0.509; return Math.exp(-A * charge * charge * Math.sqrt(ionicStrength)); }"
    },
    {
      "pattern": "solubility product",
      "action": "calculate_solubility_product",
      "formula": "result = [cation]^m * [anion]^n",
      "code_snippet": "function solubilityProduct(cationConcentration, anionConcentration, cationCoeff, anionCoeff) { return Math.pow(cationConcentration, cationCoeff) * Math.pow(anionConcentration, anionCoeff); }"
    },
    {
      "pattern": "common ion effect",
      "action": "calculate_common_ion_effect",
      "formula": "result = Ksp / [common_ion]^coefficient",
      "code_snippet": "function commonIonEffect(ksp, commonIonConcentration, coefficient) { return ksp / Math.pow(commonIonConcentration, coefficient); }"
    },
    {
      "pattern": "complex formation",
      "action": "calculate_complex_formation",
      "formula": "result = [complex] / ([metal] * [ligand]^n)",
      "code_snippet": "function complexFormation(complexConcentration, metalConcentration, ligandConcentration, ligandNumber) { return complexConcentration / (metalConcentration * Math.pow(ligandConcentration, ligandNumber)); }"
    },
    {
      "pattern": "coordination number",
      "action": "calculate_coordination_number",
      "formula": "result = number of ligands bonded to central atom",
      "code_snippet": "function coordinationNumber(ligands) { return ligands.length; }"
    },
    {
      "pattern": "crystal field splitting",
      "action": "calculate_crystal_field_splitting",
      "formula": "result = energy difference between d orbitals",
      "code_snippet": "function crystalFieldSplitting(ligandFieldStrength, metalOrbitalEnergy) { return ligandFieldStrength - metalOrbitalEnergy; }"
    },
    {
      "pattern": "magnetic moment",
      "action": "calculate_magnetic_moment",
      "formula": "result = √(n(n+2)) * Bohr_magneton",
      "code_snippet": "function magneticMoment(unpairedElectrons) { const bohrMagneton = 9.274e-24; return Math.sqrt(unpairedElectrons * (unpairedElectrons + 2)) * bohrMagneton; }"
    },
    {
      "pattern": "electron configuration",
      "action": "determine_electron_configuration",
      "formula": "result = orbital filling order",
      "code_snippet": "function electronConfiguration(atomicNumber) { const orbitals = ['1s', '2s', '2p', '3s', '3p', '4s', '3d', '4p', '5s', '4d', '5p', '6s', '4f', '5d', '6p']; const maxElectrons = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6]; let config = ''; let electrons = atomicNumber; for (let i = 0; i < orbitals.length && electrons > 0; i++) { const electronsInOrbital = Math.min(electrons, maxElectrons[i]); config += orbitals[i] + electronsInOrbital + ' '; electrons -= electronsInOrbital; } return config.trim(); }"
    },
    {
      "pattern": "oxidation state",
      "action": "calculate_oxidation_state",
      "formula": "result = formal charge - actual charge",
      "code_snippet": "function oxidationState(formalCharge, actualCharge) { return formalCharge - actualCharge; }"
    },
    {
      "pattern": "formal charge",
      "action": "calculate_formal_charge",
      "formula": "result = valence_electrons - nonbonding_electrons - (bonding_electrons / 2)",
      "code_snippet": "function formalCharge(valenceElectrons, nonbondingElectrons, bondingElectrons) { return valenceElectrons - nonbondingElectrons - (bondingElectrons / 2); }"
    },
    {
      "pattern": "bond order",
      "action": "calculate_bond_order",
      "formula": "result = (bonding_electrons - antibonding_electrons) / 2",
      "code_snippet": "function bondOrder(bondingElectrons, antibondingElectrons) { return (bondingElectrons - antibondingElectrons) / 2; }"
    },
    {
      "pattern": "hybridization",
      "action": "determine_hybridization",
      "formula": "result = based on electron geometry",
      "code_snippet": "function hybridization(electronPairs) { const hybridizations = ['', 'sp', 'sp2', 'sp3', 'sp3d', 'sp3d2']; return hybridizations[electronPairs] || 'unknown'; }"
    },
    {
      "pattern": "molecular geometry",
      "action": "determine_molecular_geometry",
      "formula": "result = based on VSEPR theory",
      "code_snippet": "function molecularGeometry(bondingPairs, lonePairs) { const geometries = { '2,0': 'linear', '3,0': 'trigonal planar', '2,1': 'bent', '4,0': 'tetrahedral', '3,1': 'trigonal pyramidal', '2,2': 'bent', '5,0': 'trigonal bipyramidal', '4,1': 'seesaw', '3,2': 'T-shaped', '2,3': 'linear', '6,0': 'octahedral', '5,1': 'square pyramidal', '4,2': 'square planar' }; return geometries[bondingPairs + ',' + lonePairs] || 'unknown'; }"
    },
    {
      "pattern": "dipole moment",
      "action": "calculate_dipole_moment",
      "formula": "result = charge * distance",
      "code_snippet": "function dipoleMoment(charge, distance) { return charge * distance; }"
    },
    {
      "pattern": "electronegativity difference",
      "action": "calculate_electronegativity_difference",
      "formula": "result = |electronegativity1 - electronegativity2|",
      "code_snippet": "function electronegativityDifference(en1, en2) { return Math.abs(en1 - en2); }"
    },
    {
      "pattern": "bond polarity",
      "action": "determine_bond_polarity",
      "formula": "result = based on electronegativity difference",
      "code_snippet": "function bondPolarity(enDifference) { if (enDifference < 0.4) return 'nonpolar covalent'; if (enDifference < 1.7) return 'polar covalent'; return 'ionic'; }"
    },
    {
      "pattern": "lattice energy",
      "action": "calculate_lattice_energy",
      "formula": "result = k * (charge1 * charge2) / distance",
      "code_snippet": "function latticeEnergy(charge1, charge2, distance) { const k = 2.31e-19; return k * charge1 * charge2 / distance; }"
    },
    {
      "pattern": "born haber cycle",
      "action": "calculate_born_haber_cycle",
      "formula": "result = sum of energy changes",
      "code_snippet": "function bornHaberCycle(...energyChanges) { return energyChanges.reduce((sum, energy) => sum + energy, 0); }"
    },
    {
      "pattern": "hess law",
      "action": "calculate_hess_law",
      "formula": "result = sum of enthalpy changes",
      "code_snippet": "function hessLaw(...enthalpyChanges) { return enthalpyChanges.reduce((sum, enthalpy) => sum + enthalpy, 0); }"
    },
    {
      "pattern": "calorimetry",
      "action": "calculate_calorimetry",
      "formula": "result = mass * specific_heat * temperature_change",
      "code_snippet": "function calorimetry(mass, specificHeat, temperatureChange) { return mass * specificHeat * temperatureChange; }"
    },
    {
      "pattern": "bomb calorimeter",
      "action": "calculate_bomb_calorimeter",
      "formula": "result = calorimeter_constant * temperature_change",
      "code_snippet": "function bombCalorimeter(calorimeterConstant, temperatureChange) { return calorimeterConstant * temperatureChange; }"
    },
    {
      "pattern": "coffee cup calorimeter",
      "action": "calculate_coffee_cup_calorimeter",
      "formula": "result = mass * specific_heat * temperature_change",
      "code_snippet": "function coffeeCupCalorimeter(mass, specificHeat, temperatureChange) { return mass * specificHeat * temperatureChange; }"
    },
    {
      "pattern": "enthalpy of formation",
      "action": "calculate_enthalpy_formation",
      "formula": "result = enthalpy of products - enthalpy of reactants",
      "code_snippet": "function enthalpyFormation(productEnthalpies, reactantEnthalpies) { const productSum = productEnthalpies.reduce((sum, h) => sum + h, 0); const reactantSum = reactantEnthalpies.reduce((sum, h) => sum + h, 0); return productSum - reactantSum; }"
    },
    {
      "pattern": "enthalpy of combustion",
      "action": "calculate_enthalpy_combustion",
      "formula": "result = heat released / moles of fuel",
      "code_snippet": "function enthalpyCombustion(heatReleased, molesOfFuel) { return heatReleased / molesOfFuel; }"
    },
    {
      "pattern": "enthalpy of fusion",
      "action": "calculate_enthalpy_fusion",
      "formula": "result = heat required to melt / moles",
      "code_snippet": "function enthalpyFusion(heatRequired, moles) { return heatRequired / moles; }"
    },
    {
      "pattern": "enthalpy of vaporization",
      "action": "calculate_enthalpy_vaporization",
      "formula": "result = heat required to vaporize / moles",
      "code_snippet": "function enthalpyVaporization(heatRequired, moles) { return heatRequired / moles; }"
    },
    {
      "pattern": "entropy of mixing",
      "action": "calculate_entropy_mixing",
      "formula": "result = -R * Σ(xi * ln(xi))",
      "code_snippet": "function entropyMixing(moleFractions) { const R = 8.314; return -R * moleFractions.reduce((sum, x) => sum + x * Math.log(x), 0); }"
    },
    {
      "pattern": "clausius clapeyron",
      "action": "calculate_clausius_clapeyron",
      "formula": "result = ln(P2/P1) = -ΔHvap/R * (1/T2 - 1/T1)",
      "code_snippet": "function clausiusClapeyron(pressure1, temperature1, temperature2, enthalpyVaporization) { const R = 8.314; return pressure1 * Math.exp(-enthalpyVaporization / R * (1/temperature2 - 1/temperature1)); }"
    },
    {
      "pattern": "van der waals",
      "action": "calculate_van_der_waals",
      "formula": "result = (P + a/V²)(V - b) = RT",
      "code_snippet": "function vanDerWaals(pressure, volume, temperature, a, b) { const R = 0.0821; return (pressure + a / (volume * volume)) * (volume - b) - R * temperature; }"
    },
    {
      "pattern": "virial equation",
      "action": "calculate_virial_equation",
      "formula": "result = PV/RT = 1 + B/V + C/V² + ...",
      "code_snippet": "function virialEquation(pressure, volume, temperature, virialCoefficients) { const R = 0.0821; let sum = 1; for (let i = 0; i < virialCoefficients.length; i++) { sum += virialCoefficients[i] / Math.pow(volume, i + 1); } return pressure * volume / (R * temperature) - sum; }"
    },
    {
      "pattern": "compressibility factor",
      "action": "calculate_compressibility_factor",
      "formula": "result = PV / RT",
      "code_snippet": "function compressibilityFactor(pressure, volume, temperature) { const R = 0.0821; return pressure * volume / (R * temperature); }"
    },
    {
      "pattern": "critical temperature",
      "action": "calculate_critical_temperature",
      "formula": "result = 8a / (27Rb)",
      "code_snippet": "function criticalTemperature(a, b) { const R = 0.0821; return 8 * a / (27 * R * b); }"
    },
    {
      "pattern": "critical pressure",
      "action": "calculate_critical_pressure",
      "formula": "result = a / (27b²)",
      "code_snippet": "function criticalPressure(a, b) { return a / (27 * b * b); }"
    },
    {
      "pattern": "critical volume",
      "action": "calculate_critical_volume",
      "formula": "result = 3b",
      "code_snippet": "function criticalVolume(b) { return 3 * b; }"
    },
    {
      "pattern": "reduced temperature",
      "action": "calculate_reduced_temperature",
      "formula": "result = T / Tc",
      "code_snippet": "function reducedTemperature(temperature, criticalTemperature) { return temperature / criticalTemperature; }"
    },
    {
      "pattern": "reduced pressure",
      "action": "calculate_reduced_pressure",
      "formula": "result = P / Pc",
      "code_snippet": "function reducedPressure(pressure, criticalPressure) { return pressure / criticalPressure; }"
    },
    {
      "pattern": "reduced volume",
      "action": "calculate_reduced_volume",
      "formula": "result = V / Vc",
      "code_snippet": "function reducedVolume(volume, criticalVolume) { return volume / criticalVolume; }"
    },
    {
      "pattern": "acentric factor",
      "action": "calculate_acentric_factor",
      "formula": "result = -log10(Pr) - 1",
      "code_snippet": "function acentricFactor(reducedPressure) { return -Math.log10(reducedPressure) - 1; }"
    },
    {
      "pattern": "fugacity coefficient",
      "action": "calculate_fugacity_coefficient",
      "formula": "result = fugacity / pressure",
      "code_snippet": "function fugacityCoefficient(fugacity, pressure) { return fugacity / pressure; }"
    },
    {
      "pattern": "activity",
      "action": "calculate_activity",
      "formula": "result = activity_coefficient * mole_fraction",
      "code_snippet": "function activity(activityCoefficient, moleFraction) { return activityCoefficient * moleFraction; }"
    },
    {
      "pattern": "chemical potential",
      "action": "calculate_chemical_potential",
      "formula": "result = standard_potential + RT * ln(activity)",
      "code_snippet": "function chemicalPotential(standardPotential, temperature, activity) { const R = 8.314; return standardPotential + R * temperature * Math.log(activity); }"
    },
    {
      "pattern": "partition function",
      "action": "calculate_partition_function",
      "formula": "result = Σ e^(-Ei/kT)",
      "code_snippet": "function partitionFunction(energyLevels, temperature) { const k = 1.381e-23; return energyLevels.reduce((sum, energy) => sum + Math.exp(-energy / (k * temperature)), 0); }"
    },
    {
      "pattern": "boltzmann distribution",
      "action": "calculate_boltzmann_distribution",
      "formula": "result = e^(-E/kT) / Z",
      "code_snippet": "function boltzmannDistribution(energy, temperature, partitionFunction) { const k = 1.381e-23; return Math.exp(-energy / (k * temperature)) / partitionFunction; }"
    },
    {
      "pattern": "maxwell boltzmann",
      "action": "calculate_maxwell_boltzmann",
      "formula": "result = 4π(m/2πkT)^(3/2) * v² * e^(-mv²/2kT)",
      "code_snippet": "function maxwellBoltzmann(mass, velocity, temperature) { const k = 1.381e-23; const factor = 4 * Math.PI * Math.pow(mass / (2 * Math.PI * k * temperature), 1.5); return factor * velocity * velocity * Math.exp(-mass * velocity * velocity / (2 * k * temperature)); }"
    },
    {
      "pattern": "root mean square velocity",
      "action": "calculate_rms_velocity",
      "formula": "result = √(3RT/M)",
      "code_snippet": "function rmsVelocity(temperature, molarMass) { const R = 8.314; return Math.sqrt(3 * R * temperature / molarMass); }"
    },
    {
      "pattern": "average velocity",
      "action": "calculate_average_velocity",
      "formula": "result = √(8RT/πM)",
      "code_snippet": "function averageVelocity(temperature, molarMass) { const R = 8.314; return Math.sqrt(8 * R * temperature / (Math.PI * molarMass)); }"
    },
    {
      "pattern": "most probable velocity",
      "action": "calculate_most_probable_velocity",
      "formula": "result = √(2RT/M)",
      "code_snippet": "function mostProbableVelocity(temperature, molarMass) { const R = 8.314; return Math.sqrt(2 * R * temperature / molarMass); }"
    },
    {
      "pattern": "mean free path",
      "action": "calculate_mean_free_path",
      "formula": "result = 1 / (√2 * σ * n)",
      "code_snippet": "function meanFreePath(crossSection, numberDensity) { return 1 / (Math.sqrt(2) * crossSection * numberDensity); }"
    },
    {
      "pattern": "collision frequency",
      "action": "calculate_collision_frequency",
      "formula": "result = average_velocity / mean_free_path",
      "code_snippet": "function collisionFrequency(averageVelocity, meanFreePath) { return averageVelocity / meanFreePath; }"
    },
    {
      "pattern": "effusion rate",
      "action": "calculate_effusion_rate",
      "formula": "result = (pressure * area) / √(2πmkT)",
      "code_snippet": "function effusionRate(pressure, area, mass, temperature) { const k = 1.381e-23; return (pressure * area) / Math.sqrt(2 * Math.PI * mass * k * temperature); }"
    },
    {
      "pattern": "graham law",
      "action": "calculate_graham_law",
      "formula": "result = rate1/rate2 = √(M2/M1)",
      "code_snippet": "function grahamLaw(molarMass1, molarMass2) { return Math.sqrt(molarMass2 / molarMass1); }"
    },
    {
      "pattern": "viscosity",
      "action": "calculate_viscosity",
      "formula": "result = (5/16) * √(mkT/π) / σ²",
      "code_snippet": "function viscosity(mass, temperature, crossSection) { const k = 1.381e-23; return (5/16) * Math.sqrt(mass * k * temperature / Math.PI) / (crossSection * crossSection); }"
    },
    {
      "pattern": "thermal conductivity",
      "action": "calculate_thermal_conductivity",
      "formula": "result = (25/32) * (k/σ²) * √(kT/πm)",
      "code_snippet": "function thermalConductivity(temperature, mass, crossSection) { const k = 1.381e-23; return (25/32) * (k / (crossSection * crossSection)) * Math.sqrt(k * temperature / (Math.PI * mass)); }"
    },
    {
      "pattern": "diffusion coefficient",
      "action": "calculate_diffusion_coefficient",
      "formula": "result = (3/16) * √(kT/πm) / (n * σ²)",
      "code_snippet": "function diffusionCoefficient(temperature, mass, numberDensity, crossSection) { const k = 1.381e-23; return (3/16) * Math.sqrt(k * temperature / (Math.PI * mass)) / (numberDensity * crossSection * crossSection); }"
    }
  ]
}
